name: CD
# check cd flow hotfix branch 4.0

on:
  push:
    branches:
      - main
      # - 'feature*'
      - 'feature/**'
      # - 'hotfix*'
      - 'hotfix/**'
    tags:
      - 'v*.*.*'
permissions:
  contents: write
  pull-requests: write

jobs:
  deploy-dev:
    runs-on: self-hosted
    if: startsWith(github.ref, 'refs/heads/hotfix') || startsWith(github.ref, 'refs/heads/feature')
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set Environment
        id: set-env
        run: |
          echo "env=dev" >> $GITHUB_OUTPUT
          echo "tag=dev-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/todo:${{ steps.set-env.outputs.tag }}
          docker build -t $IMAGE .
          docker push $IMAGE

      - name: Deploy to Dev K8s
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/todo:${{ steps.set-env.outputs.tag }}
          kubectl create namespace dev --dry-run=client -o yaml | kubectl apply -f -
          for f in k8s/dev/*.yaml; do
            sed "s|todo:.*|$IMAGE|g" $f | kubectl apply -n dev -f -
          done
          kubectl rollout status deployment -n dev todolist

  deploy-staging:
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set Environment
        id: set-env
        run: |
          echo "env=staging" >> $GITHUB_OUTPUT
          echo "tag=staging-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/todo:${{ steps.set-env.outputs.tag }}
          docker build -t $IMAGE .
          docker push $IMAGE

      - name: Deploy to Staging K8s
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/todo:${{ steps.set-env.outputs.tag }}
          kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -
          for f in k8s/staging/*.yaml; do
            sed "s|todo:.*|$IMAGE|g" $f | kubectl apply -n staging -f -
          done
          kubectl rollout status deployment -n staging todolist
  deploy-prod:
    runs-on: self-hosted
    if: github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set Environment
        id: set-env
        run: |
          echo "env=prod" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}          
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/todo:${{ steps.set-env.outputs.tag }}
          docker build -t $IMAGE .
          docker push $IMAGE

      - name: Set up kubectl
        run: |
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          kubectl cluster-info

      - name: Update K8s Manifests with Image
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/todo:${{ steps.set-env.outputs.tag }}
          kubectl create namespace prod --dry-run=client -o yaml | kubectl apply -f -
          for f in k8s/prod/*.yaml; do
            sed "s|todo:.*|$IMAGE|g" $f | kubectl apply -n prod -f -
          done

      - name: Deploy to K8s
        run: |
          kubectl rollout status deployment -n prod todolist
